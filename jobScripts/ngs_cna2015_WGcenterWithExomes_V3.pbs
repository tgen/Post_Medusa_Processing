#!/bin/bash
##### Author: Jessica Aldrich #####
##### Parameterized PBS Script ####
#PBS -S /bin/bash
#PBS -N cna2015_unfi
#PBS -l walltime=12:00:00
#PBS -l nodes=1:ppn=2
#PBS -M ${USER}@tgen.org
#PBS -m a
#PBS -j oe
#PBS -o ${HOME}/STD_OUT/${PBS_JOBNAME}_${OFILE}_${PBS_JOBID}.out 

#######PBS -q overflow
module load VCFtools/0.1.10
module load perl/5.14.2
#module load MCR/8.3
module load MCR/9.0
module load R/3.0.0

export PERL5LIB=$PERL5LIB:/home/jaldrich/perl5/lib/perl5

#MCRPATH=/packages/MCR/8.3/v83
MCRPATH=/packages/MCR/9.0/v90

cd $PBS_O_WORKDIR
cd ${DIR}

SAMPATH="/packages/samtools/0.1.18/samtools"
EXTENSIONS=/home/tgenref/pecan/post_central_pipe_processing/post_medusa_V1.0/save_recipe.txt
ZTABLE="/home/tgenref/pecan/cna_manual/ztable.txt"
CCDSLIST="/home/tgenref/pecan/ensembl_v74/Homo_sapiens.GRCh37.74.gtf.hs37d5.EGFRvIII.gtf"

# Gender testing variables
SNPSIFT=/home/jkeats/local/snpEff_v3.6c/snpEff/SnpSift.jar
DBSNP_VCF=/home/tgenref/pipeline_v0.3/gatk_bundle_2.5/b37/dbsnp_137.b37.vcf
GENDER_GRAPH_R=/home/tgenref/pecan/post_central_pipe_processing/post_medusa_V1.0/jobScripts/Gender_Graph.R

FAILED=0

# Filter vcf to Targets

cat ${VCF} | java -jar ${SNPSIFT} intervals ${BEDFILE} > ${VCF}.temp.vcf

if [ $? -ne 0 ]
then
        FAILED=1
fi

mv ${VCF} ${VCF}.original
mv ${VCF}.temp.vcf ${VCF}

# Gender correction

mkdir genderTest

#Haplotyper Caller outputs the genotype columns in alphabetical-numeric order.  Need to determine if the order is Tumor-Normal (expected) or Normal-Tumor (it happens)
echo "The following line contains the Haplotyper Caller VCF header:"
grep -v "##" ${VCF} | grep "#"
echo Extracting the first genotype column to determine if it is tumor or normal
FIRST_GENOTYPE_COLUMN=`grep -v "##" ${VCF} | grep "#" | cut -f10`
echo The first genotype column header is: ${FIRST_GENOTYPE_COLUMN}
FRACTION_LETTER=`echo ${FIRST_GENOTYPE_COLUMN} | cut -d_ -f6 | cut -c1`
echo The fraction letter in the first genotype column is: ${FRACTION_LETTER}

if [ "${FRACTION_LETTER}" == "T" ]
then
        echo Found expected genotype order - Proceeding with filtering
        cat ${VCF} | java -jar ${SNPSIFT} filter \
        "( GEN[1].DP > 50 ) & isVariant( GEN[1] ) \
        & ((REF = 'A') | (REF = 'C') | (REF = 'G') | (REF = 'T')) \
        & ((ALT = 'A') | (ALT = 'C') | (ALT = 'G') | (ALT = 'T')) \
        & (exists ID) & ( ID =~ 'rs' ) \
        & ( CHROM = 'X' )" | \
        java -jar ${SNPSIFT} annotate -info GMAF ${DBSNP_VCF} - | \
        java -jar ${SNPSIFT} filter "( GMAF >= 0.05 )" | \
        java -jar ${SNPSIFT} extractFields -e "." - \
        CHROM POS ID REF ALT FILTER GEN[1].AD[0] GEN[1].AD[1] GEN[1].DP | \
        awk 'NR>1' | \
        awk 'BEGIN{OFS = "\t" ; print "Chr", "Pos", "Normal_Ratio", "Normal_DP"}{OFS = "\t" ; print $1, $2, $8/($7+$8), $9}' > GenderDataTable.txt

elif [ "${FRACTION_LETTER}" == "C" ]
then
        echo Found the wrong genotype order - Reordering genotype columns and then Proceeding with filtering
        awk -F'\t' '{OFS="\t" ; print $1,$2,$3,$4,$5,$6,$7,$8,$9,$11,$10}' ${VCF} | java -jar ${SNPSIFT} filter \
        "( GEN[1].DP > 50 ) & isVariant( GEN[1] ) \
        & ((REF = 'A') | (REF = 'C') | (REF = 'G') | (REF = 'T')) \
        & ((ALT = 'A') | (ALT = 'C') | (ALT = 'G') | (ALT = 'T')) \
        & (exists ID) & ( ID =~ 'rs' ) \
        & ( CHROM = 'X' )" | \
        java -jar ${SNPSIFT} annotate -info GMAF ${DBSNP_VCF} - | \
        java -jar ${SNPSIFT} filter "( GMAF >= 0.05 )" | \
        java -jar ${SNPSIFT} extractFields -e "." - \
        CHROM POS ID REF ALT FILTER GEN[1].AD[0] GEN[1].AD[1] GEN[1].DP | \
        awk 'NR>1' | \
        awk 'BEGIN{OFS = "\t" ; print "Chr", "Pos", "Normal_Ratio", "Normal_DP"}{OFS = "\t" ; print $1, $2, $8/($7+$8), $9}' > GenderDataTable.txt
else
        #This should not happen
        echo WARNING!!! ERROR - PLEASE LOOK WE DID NOT FIND A T or C, what the hell!
        exit 1
fi

#Calculate Mean and SD
MEAN=`awk 'NR>1' GenderDataTable.txt | awk '{sum+=$3} END {print sum/NR}'`
SD=`awk 'NR>1' GenderDataTable.txt | awk '{sum+=$3; array[NR]=$3} END {for(x=1;x<=NR;x++){sumsq+=((array[x]-(sum/NR))**2);}print sqrt(sumsq/NR)}'`
ALLELES=`awk 'NR>1' GenderDataTable.txt | wc -l | cut -f1`

if [[ $MEAN > 0.8 ]]
then
        MALE=yes
        awk -F'\t' '{ if ($1 == 23 || $1 == 24) { OFS = "\t" ; print $1,$2,$3*2 } else { print $0 }}' ${NORMALDAT} > ${NORMALDAT}.male
        mv ${NORMALDAT} ${NORMALDAT}.original
        mv ${NORMALDAT}.male ${NORMALDAT}
fi

NORMX=`cat ${NORMALSAMPLE}.proj.md.jr.bam.picHSMetrics|grep -v ^#|grep -v ^BAIT |cut -f 22`
echo $NORMX
TUMORX=`cat ${TUMORSAMPLE}.proj.md.jr.bam.picHSMetrics|grep -v ^#|grep -v ^BAIT |cut -f 22`
echo $TUMORX

##parse merged VCF
/home/tgenref/pecan/cna_manual/parseMergeVCF.pl ${VCF} ${NORMALSAMPLE} ${TUMORSAMPLE}

if [ $? -ne 0 ]
then
        FAILED=1
fi

##CNA  - Copy Number Analysis (MATLAB)
HETFILE=merged.vcf.txt
assayID="Genome"
smWin=10                 #   <<<< THIS CAN BE ADJUSTED - smoothing window size >>>>
fcThresh=0.75           #   <<<< THIS CAN BE ADJUSTED - fold-change threshold - plot >>>>
res=10                   #   <<<< THIS CAN BE ADJUSTED - min resolution >>>>
maxGap=100000000   		#   <<<< THIS CAN BE ADJUSTED - max distance between consecutive postions >>>>

hetDepthN=${NORMX}      #   <<<< THIS CAN BE ADJUSTED - min depth of diploid het position >>>>
hetDepthT=${TUMORX}     #   <<<< THIS CAN BE ADJUSTED - min depth of diploid het position >>>>
hetDev=0.025             #   <<<< THIS CAN BE ADJUSTED - allowable deviation from ref allele frequency of 0.5

readDepth=100
#readDepth=$( echo "$hetDepthN * 3" | bc )            #   <<<< THIS CAN BE ADJUSTED - min number of counts >>>
echo $readDepth
echo "time /home/tgenref/pecan/cna_manual/pegasusCNA/run_ngsCNA.sh ${MCRPATH} ${NORMALDAT} ${TUMORDAT} ${OFILE}_unfi ${HETFILE} ${smWin} ${fcThresh} ${assayID} ${res} ${readDepth} ${maxGap} ${hetDepth} ${hetDev}"

time /home/tgenref/pecan/cna_manual/pegasusCNA/run_ngsCNA.sh ${MCRPATH} ${NORMALDAT} ${TUMORDAT} ${OFILE}_unfi ${HETFILE} ${smWin} ${fcThresh} ${assayID} ${res} ${readDepth} ${maxGap} ${hetDepthN} ${hetDepthT} ${hetDev}

if [ $? -ne 0 ]
then
        FAILED=1
fi

Rscript --vanilla /home/tgenref/pecan/cna_manual/validateCNAHets_v2.R ${OFILE}_unfi.hets.tsv

if [ $? -ne 0 ]
then
        FAILED=1
fi

if [ -f CNA_unimodal_pass ]
then
	echo
        echo ${OFILE}_unfi.hets.tsv fits a unimodal distribution.
        echo Continuing CNA script.
	
	awk -F'\t' 'NR%3==1' ${OFILE}_unfi.cna.tsv > temp.cna.tsv
        mv ${OFILE}_unfi.cna.tsv ${OFILE}_unfi.cna.tsv.original
        mv temp.cna.tsv ${OFILE}_unfi.cna.tsv

	## CBS segmentation
	Rscript --vanilla /home/tgenref/pecan/cna_manual/runDNAcopyUnfiV3.R ${OFILE}_unfi.cna.tsv ${OFILE}_unfi.seg
	
	if [ $? -ne 0 ]
	then
        	FAILED=1
	fi

else
	# keep hets.tsv original
        mv ${OFILE}_filt.hets.tsv ${OFILE}_filt.hets.tsv.original

        awk -F'\t' '{ OFS = "\t" ; print $2,$3-10000,$3+10000 }' CNA_positions_to_exclude.txt > CNA_intervals_to_exclude.bed

        bedtools merge -i CNA_intervals_to_exclude.bed > CNA_intervals_to_exclude_merged.bed

        awk -F'\t' 'NR > 1 { OFS = "\t" ; print $1,$2,$2+1,$3,$4,$5,$6,$7,$8 }' merged.vcf.txt > merged.vcf.bed

        mv merged.vcf.txt merged.vcf.txt.original

        /home/achristofferson/local/bedtools-v2.25.0/bin/bedtools intersect -v -a merged.vcf.bed -b CNA_intervals_to_exclude_merged.bed > temp

        awk -F'\t' 'BEGIN { OFS = "\t" ; print "Chromosome     Position        NormalReadDepth NormalRefAllele NormalAltAllele TumorReadDepth  TumorRefAllele  TumorAltAllele" } { OFS = "\t" ; print $1,$2,$4,$5,$6,$7,$8,$9 }' temp > merged.vcf.txt

        rm temp	

	time /home/tgenref/pecan/cna_manual/pegasusCNA/run_ngsCNA.sh ${MCRPATH} ${NORMALDAT} ${TUMORDAT} ${OFILE}_unfi ${HETFILE} ${smWin} ${fcThresh} ${assayID} ${res} ${readDepth} ${maxGap} ${hetDepthN} ${hetDepthT} ${hetDev}

	if [ $? -ne 0 ]
	then
	        FAILED=1
	fi

	awk -F'\t' 'NR%5==1' ${OFILE}_unfi.cna.tsv > temp.cna.tsv
        mv ${OFILE}_unfi.cna.tsv ${OFILE}_unfi.cna.tsv.filt.original
        mv temp.cna.tsv ${OFILE}_unfi.cna.tsv
	
	## CBS segmentation
	Rscript --vanilla /home/tgenref/pecan/cna_manual/runDNAcopyUnfiV3.R ${OFILE}_unfi.cna.tsv ${OFILE}_unfi.seg

	if [ $? -ne 0 ]
	then
	       	FAILED=1
	fi
fi

##plotting
Rscript --vanilla /home/tgenref/pecan/cna_manual/plotCGH.R ${OFILE}_unfi.cna.tsv ${OFILE}_unfi.amp.tsv ${OFILE}_unfi.del.tsv ${OFILE}_unfi

if [ $? -ne 0 ]
then
        FAILED=1
fi

if [ -f ${OFILE}_unfi.hets.tsv ]
then
	Rscript --vanilla /home/tgenref/pecan/cna_manual/plotCGHwithHets.R ${OFILE}_unfi.cna.tsv ${OFILE}_unfi.amp.tsv ${OFILE}_unfi.del.tsv ${OFILE}_unfi.hets.tsv ${OFILE}_unfi_withhets
	
	if [ $? -ne 0 ]
	then
	        FAILED=1
	fi
fi

Rscript --vanilla /home/tgenref/pecan/cna_manual/plotBAF.R baf.txt ${OFILE}_unfi.baf

if [ $? -ne 0 ]
then
        FAILED=1
fi

Rscript --vanilla /home/tgenref/pecan/cna_manual/runDNAcopyBAF.R baf.txt ${OFILE}_unfi.baf

if [ $? -ne 0 ]
then
        FAILED=1
fi

##Annotate and convert SEG file to gVCF 
DUPTHRESH=0.58     #   <<<< THIS CAN BE ADJUSTED - Amplification Threshold - log2 fold-change >>>>
DELTHRESH=-0.99    #   <<<< THIS CAN BE ADJUSTED - Deletion Threshold - log2 fold-change >>>>

/home/tgenref/pecan/cna_manual/annotSeg.pl ${CCDSLIST} ${OFILE}_unfi.cna.seg ${DUPTHRESH} ${DELTHRESH}

if [ $? -ne 0 ]
then
        FAILED=1
fi

/home/tgenref/pecan/cna_manual/validateCNAVariantsVCF.pl ${OFILE}_unfi.cna.seg.vcf baf.txt ${ZTABLE}

if [ $? -ne 0 ]
then
        FAILED=1
fi

# Plot Linear CNA and BAF
module load MCR/9.0
MCR9PATH=/packages/MCR/9.0/v90

/home/tgenref/pecan/cna_manual/plotLinearCNA/run_plotLinearCNAandBAF.sh ${MCR9PATH} ${OFILE}_unfi.cna.tsv baf.txt ${OFILE}_unfi.cnaBAF.png

# Removed error capture on Matlab image creation. The image may not be created depending on sample quality and depth.
if [ $? -ne 0 ]
then
        FAILED=1
fi

# Plot Linear CNA and Abs BAF
/home/tgenref/pecan/cna_manual/plotLinearCNAabsBAF/run_plotLinearCNAandAbsBAF.sh ${MCR9PATH} ${OFILE}_unfi.cna.tsv baf.txt ${OFILE}_unfi.cnaAbsBAF.png

# Removed error capture on Matlab image creation. The image may not be created depending on sample quality and depth.
if [ $? -ne 0 ]
then
        FAILED=1
fi


# Rsync back to isilon

fails=0

if [ ${FAILED} = 0 ]
then
        for extToCopy in `cat $EXTENSIONS | grep "cna=" |cut -d= -f2 | tr "," "\n"`
        do
                for fileToSave in `find ${DIR} -name "*$extToCopy"`
                do
                        fileName=`basename $fileToSave`
                        ssh ${USER}@172.19.1.222 "rsync $fileToSave ${STARTDIR}/${PATIENT_NAME}/cna_manual/${GENOMEPAIR}_unfi/ "

                        if [ $? -ne 0 ]
                        then
                                fails=1
                        fi

			sleep 10
                done
		
		sleep 10
        done

        ssh ${USER}@172.19.1.222 "rsync ${DIR}/${NORMALSAMPLEG}.proj.md.jr.bam.clc.cln.dat.cnaStats ${STARTDIR}/${PATIENT_NAME}/stats/${NORMALSAMPLEG}.proj.md.jr.bam.clc.cln.dat.cnaManualUnfiStats"

        if [ $? -ne 0 ]
        then
                fails=1
        fi

	sleep 10

        ssh ${USER}@172.19.1.222 "rsync ${DIR}/${TUMORSAMPLEG}.proj.md.jr.bam.clc.cln.dat.cnaStats ${STARTDIR}/${PATIENT_NAME}/stats/${TUMORSAMPLEG}.proj.md.jr.bam.clc.cln.dat.cnaManualUnfiStats"

        if [ $? -ne 0 ]
        then
                fails=1
        fi

	sleep 10 
else
        ssh ${USER}@172.19.1.222 "rm ${STARTDIR}/${PATIENT_NAME}/cna_manual/${GENOMEPAIR}_unfi/CNA_Manual_In_Progress ; \
                rm ${STARTDIR}/${PATIENT_NAME}/CNA_Manual_In_Progress ; \
                touch ${STARTDIR}/${PATIENT_NAME}/CNA_Manual_Fail ; \
		echo CNA pbs script failed for ${GENOMEPAIR} >> ${STARTDIR}/${PATIENT_NAME}/cna_manual/${GENOMEPAIR}_unfi/CNA_Manual_Fail ; \
                echo CNA pbs script failed for ${GENOMEPAIR} | mailx -s "Post_Medusa_Processing_Failed" ${USER}@tgen.org "
	exit 1
fi

sleep 10

if [ $fails -eq 0 ] && [ ${FAILED} = 0 ]
then
        ssh ${USER}@172.19.1.222 "rm ${STARTDIR}/${PATIENT_NAME}/cna_manual/${GENOMEPAIR}_unfi/CNA_Manual_In_Progress ; \
                touch ${STARTDIR}/${PATIENT_NAME}/cna_manual/${GENOMEPAIR}_unfi/CNA_Manual_Complete ; \
                COMPLETE=0 ; \
                for XPAIR in \`echo ${EXPECTEDPAIRS} | sed 's/@/\n/g'\`
                do 
                        if [ ! -f ${STARTDIR}/${PATIENT_NAME}/cna_manual/\${XPAIR}/CNA_Manual_Complete ]
                        then
                                COMPLETE=1
                        fi
                done ; \
                if [ \${COMPLETE} = 0 ]
                then
                        rm ${STARTDIR}/${PATIENT_NAME}/CNA_Manual_In_Progress
                        touch ${STARTDIR}/${PATIENT_NAME}/CNA_Manual_Complete
                fi "

else
	if [ $fails -ne 0 ] && [ ${FAILED} = 0 ]
        then

        	ssh ${USER}@172.19.1.222 "rm ${STARTDIR}/${PATIENT_NAME}/cna_manual/${GENOMEPAIR}_unfi/CNA_Manual_In_Progress ; \
                	echo CNA pbs script failed to rsync back to isilon for ${GENOMEPAIR} >> ${STARTDIR}/${PATIENT_NAME}/cna_manual/${GENOMEPAIR}_unfi/CNA_Manual_Fail ; \
                	echo CNA pbs script failed to rsync back to isilon for ${GENOMEPAIR} | mailx -s "Post_Medusa_Processing_Failed" ${USER}@tgen.org "

	fi
fi





