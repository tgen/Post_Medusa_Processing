#!/bin/bash
#SBATCH --job-name="Salmon_GTF_V7.2"
#SBATCH --time=4:00:00 
#SBATCH -n 1
#SBATCH -N 1
#SBATCH --cpus-per-task 16
#SBATCH --mail-user=${USER}@tgen.org

cd $DIR

#####################################################
##
##   VARIABLES
##
#####################################################

SALMON_BINARY=/home/achristofferson/local/Salmon-0.7.2_linux_x86_64/bin/salmon
SALMON_INDEX_GTF=/home/achristofferson/salmon_index/Homo_sapiens_number_fix.GRCh37.74.gtf.hs37d5.EGFRvIII_v7.2.fa.index
GTF=/home/tgenref/homo_sapiens/grch37_hg19/hs37d5_tgen/gene_model/ensembl_v74//Homo_sapiens.GRCh37.74.gtf.hs37d5.EGFRvIII.gtf

# Generate a variable with each R1 and R2 fastq in the same order

#Read1
#Add loop control for first line processed
CONTROL=1
for line in `ls ${SAMPLE}*_R1_001.fastq.gz`
do
        if [ ${CONTROL} -eq 1 ]
        then
                echo First read is ${line}
                FORWARD="${line}"
                CONTROL=0
        else
                echo Additional read is ${line}
                FORWARD="${FORWARD} ${line}"
        fi
done

echo Input list of forward reads:
echo ${FORWARD}

#Read2
#Reset loop control for first line processed
CONTROL=1
for line in `ls ${SAMPLE}*_R2_001.fastq.gz`
do
        if [ ${CONTROL} -eq 1 ]
        then
                echo First read is ${line}
                REVERSE="${line}"
                CONTROL=0
        else
                echo Additional read is ${line}
                REVERSE="${REVERSE} ${line}"
        fi
done

echo Input list of reverse reads:
echo ${REVERSE}


${SALMON_BINARY} quant \
        --index ${SALMON_INDEX_GTF} \
        --libType ${RNATYPE} \
        --numBootstraps 100 \
        --mates1 <(zcat ${FORWARD}) \
        --mates2 <(zcat ${REVERSE}) \
        --threads 14 \
        --geneMap ${GTF} \
        --output ${SAMPLE}.salmonDir/ensembl74_GTF_V7.2

if [ "$?" -ne 0 ]
then
        ssh ${USER}@${DATAMOVERIP} "cd ${STARTDIR}/${PATIENT_NAME} ; \
                rm ${ASSAY}/${RNASAMPLEID}/${RNASAMPLEID}.salmonDir/ensembl74_GTF_V7.2/Salmon_In_Progress ; \
                echo Salmon failed for ${RNASAMPLEID} >> ${ASSAY}/${RNASAMPLEID}/${RNASAMPLEID}.salmonDir/ensembl74_GTF_V7.2/Salmon_Fail ; \
                echo Salmon failed for ${RNASAMPLEID} | mailx -s "Post Medusa Processing Failed" ${USER}@tgen.org"
	exit 1
else
	#Rename Result files
	cd ${SAMPLE}.salmonDir/ensembl74_GTF_V7.2
	mv quant.genes.sf ${SAMPLE}_salmon_e74GTF_genes.sf
	mv quant.sf ${SAMPLE}_salmon_e74GTF_transcripts.sf

	ENST_TO_FILTER=${BASEDIR}/ENST_to_filter_out_of_salmon_V7.2_TPM_results.txt
	ENSG_TO_ENST_MAP=${BASEDIR}/ENSG_to_ENST_map.txt

	# Remove unwanted ENST
        awk -F'\t' 'FNR == NR {a[$1]=$1;next} !($1 in a) { OFS = "\t" ; print $0 }' ${ENST_TO_FILTER} ${SAMPLE}_salmon_e74GTF_transcripts.sf > filtered_quant.sf

        # Calculate SUM of number of reads divided by Effective length fot TPM calculation 
        TPMSUM=`awk -F'\t' 'BEGIN { SUM = 0 } NR > 1 { SUM = SUM + ($5/$3)} END { print SUM }' filtered_quant.sf`

        # Recalulate TPM for each ENST
        awk -F'\t' -v TPMSUM=${TPMSUM} 'NR == 1 { OFS = "\t" ; print $0 } ; NR > 1 { OFS = "\t" ; $4 = 1000000 * ( $5 / $3 ) / TPMSUM ; print $0 } ' filtered_quant.sf > filtered_recalculated_quant.sf

        # Map each ENST to it's ENSG
        awk -F'\t' 'BEGIN{ OFS = "\t" ; print "Name","Gene","TPM"  } FNR==NR{a[$2]=$1;next} ($1 in a) { OFS = "\t" ; print $1,a[$1],$4 }' ${ENSG_TO_ENST_MAP} filtered_recalculated_quant.sf > filtered_recalculated_quant_with_ENSG.sf

        # Sum the transcript TPM's for each gene to create final filtered Gene level TPM file
        awk -F'\t' 'BEGIN{OFS = "\t" ; print "Name","TPM"} NR> 1 { a[$2]+=$3 } END { for (x in a) { OFS = "\t" ; print x,a[x] }}' filtered_recalculated_quant_with_ENSG.sf > ${SAMPLE}_salmon_e74GTF_filtered_genes.sf

        # make final name of filtered transcript file
        mv filtered_recalculated_quant.sf ${SAMPLE}_salmon_e74GTF_filtered_transcripts.sf
        rm filtered_quant.sf filtered_recalculated_quant_with_ENSG.sf

	DIR=`pwd`

	ssh ${USER}@${DATAMOVERIP} "rsync -r ${DIR} ${STARTDIR}/${PATIENT_NAME}/${ASSAY}/${RNASAMPLEID}/${RNASAMPLEID}.salmonDir/ "

        if [ $? -ne 0 ]
        then
                ssh ${USER}@${DATAMOVERIP} "rm ${STARTDIR}/${PATIENT_NAME}/${ASSAY}/${RNASAMPLEID}/${RNASAMPLEID}.salmonDir/ensembl74_GTF_V7.2/Salmon_In_Progress ; \
                        echo Failed to rsync salmon dir to isilon for ${RNASAMPLEID} >> ${STARTDIR}/${PATIENT_NAME}/${ASSAY}/${RNASAMPLEID}/${RNASAMPLEID}.salmonDir/ensembl74_GTF_V7.2/Salmon_Fail ; \
                        echo Failed to rsync salmon dir to isilon for ${RNASAMPLEID} | mailx -s "Post Medusa Processing Failed" ${USER}@tgen.org"

        else
                ssh ${USER}@${DATAMOVERIP} "rm ${STARTDIR}/${PATIENT_NAME}/${ASSAY}/${RNASAMPLEID}/${RNASAMPLEID}.salmonDir/ensembl74_GTF_V7.2/Salmon_In_Progress ; \
                        touch ${STARTDIR}/${PATIENT_NAME}/${ASSAY}/${RNASAMPLEID}/${RNASAMPLEID}.salmonDir/ensembl74_GTF_V7.2/Salmon_Complete ; \
                        COMPLETE=0 ; \
                        for RSAMPLE in \`echo ${RNACHECK} |sed 's/@/\n/g'\`
                        do
				echo ${STARTDIR}/${PATIENT_NAME}/\${RSAMPLE}.salmonDir/ensembl74_GTF_V7.2/Salmon_Complete
                                if [ ! -f ${STARTDIR}/${PATIENT_NAME}/\${RSAMPLE}.salmonDir/ensembl74_cDNA/Salmon_Complete ] || [ ! -f ${STARTDIR}/${PATIENT_NAME}/\${RSAMPLE}.salmonDir/ensembl74_GTF/Salmon_Complete ] || [ ! -f ${STARTDIR}/${PATIENT_NAME}/\${RSAMPLE}.salmonDir/ensembl74_GTF_V7.2/Salmon_Complete ]
                                then
                                        COMPLETE=1
                                fi
                        done ; \
                        if [ \${COMPLETE} = 0 ]
                        then
                                rm ${STARTDIR}/${PATIENT_NAME}/Salmon_In_Progress
                                touch ${STARTDIR}/${PATIENT_NAME}/Salmon_Complete
                        fi "



        fi
fi



